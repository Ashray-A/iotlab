TRAFIC LIGHT
3 LED's
3 RESISTORS

int REDPIN = 13;  
int YELLOWPIN = 12;  
int GREENPIN = 11;  

void setup() {  
  pinMode(REDPIN, OUTPUT);  
  pinMode(YELLOWPIN, OUTPUT);  
  pinMode(GREENPIN, OUTPUT);  
}  

void loop() {  
  //Turn on the red led, and turn off the yellow and green leds.  
  digitalWrite(REDPIN, HIGH);  
  digitalWrite(YELLOWPIN, LOW);  
  digitalWrite(GREENPIN, LOW);  
  delay(2000);  

  //Turn on the yellow led, and turn off the red and green leds.  
  digitalWrite(REDPIN, LOW);  
  digitalWrite(YELLOWPIN, HIGH);  
  digitalWrite(GREENPIN, LOW);  
  delay(2000);  

  //Turn on the green led, and turn off the red and yellow leds.  
  digitalWrite(REDPIN, LOW);  
  digitalWrite(YELLOWPIN, LOW);  
  digitalWrite(GREENPIN, HIGH);  
  delay(2000);  
}


LDR VARYING LIGHT
COMPONENTS
1 led
1 lightresistor
1 220ohm resistor
1 10 kiloohm resistor
1arduino uno
   
void setup() {
  pinMode(A0, INPUT);  // LDR pin
  pinMode(9, OUTPUT);  // LED pin (PWM)
}

void loop() {
  analogWrite(9, map(analogRead(A0), 0, 1023, 0, 255));
  delay(100);
}

--->Raw LDR (textbook 2-wire)

5V → LDR leg 1

LDR leg 2 → A0 (also to one end of 10kΩ resistor)

Other end of 10kΩ → GND

LDR module (4-pin board)

5V → VCC on module

GND → GND on module

A0 → AO on module

(optional) D2 → DO on module (if you want digital on/off)

---->LED (external)

D9 → 220Ω resistor → LED anode (long leg)

LED cathode (short leg) → GND


Ground/common

Connect Arduino GND to the breadboard ground rail so module/LDR and LED share the same GND.


SERIAL MONITOR
1 LED
1 220 OHM RESISTOR

void setup() {
  pinMode(13, OUTPUT);
  digitalWrite(13, LOW);
  Serial.begin(9600);
}

void loop() {
  if (Serial.available() > 0) {
    char letter = Serial.read();

    if (letter == '1') {
      digitalWrite(13, HIGH);
      Serial.println("The LED is ON");
 
    } 
    else if (letter == '0') {
      digitalWrite(13, LOW);
      Serial.println("The LED is OFF");

    }
    else if (letter == '\n' || letter == '\r') {
      // ignore newlines
    }
    else {
      Serial.println("Invalid Input");
    }

  }
}

--->LED

Pin 3 → 220Ω resistor → LED anode (long leg)

LED cathode (short leg) → GND

-->Serial Monitor settings

Open Serial Monitor in Arduino IDE

Set baud rate: 9600 (to match Serial.begin(9600))




DHT TEMP HUM
1 DHT11
1 LED
1 220ohm RESISTOR

Turn on led based on dht temp sensor
#include <DHT.h>

// Define DHT Sensor Type and Pin
#define DHTPIN 2        // Pin where the DHT sensor is connected
#define DHTTYPE DHT11   // Change to DHT22 if using that model

DHT dht(DHTPIN, DHTTYPE);

// Define the output pin for LED
#define LED_PIN 13

// Set temperature threshold in Celsius
#define TEMP_THRESHOLD 30.0

void setup() {
  Serial.begin(9600);
  dht.begin();

  // Initialize LED output pin
  pinMode(LED_PIN, OUTPUT);
  digitalWrite(LED_PIN, LOW);  // Ensure it's OFF initially
}

void loop() {
  delay(2000);  // Wait between readings

  // Read temperature as Celsius
  float temperature = dht.readTemperature();
  float humidity = dht.readHumidity();

  // Check if any reads failed
  if (isnan(temperature) || isnan(humidity)) {
    Serial.println("Failed to read from DHT sensor!");
    return;
  }

  // Print the readings
  Serial.print("Temperature: ");
  Serial.print(temperature);
  Serial.print(" °C\tHumidity: ");
  Serial.print(humidity);
  Serial.println(" %");

  // Check if it's too hot
  if (temperature > TEMP_THRESHOLD) {
    digitalWrite(LED_PIN, HIGH);  // Turn ON LED
    Serial.println("Too hot! LED is ON.");
  } else {
    digitalWrite(LED_PIN, LOW);   // Turn OFF LED
    Serial.println("Temperature normal. LED is OFF.");
  }
}


---->DHT11 sensor (3-pin)

VCC → 5V on Arduino

DATA → Digital pin 2 (DHTPIN)

GND → GND on Arduino


--->LED (external)

D13 → 220Ω resistor → LED anode (long leg)

LED cathode (short leg) → GND

How to install in Arduino IDE
- Open: Sketch → Include Library → Manage Libraries…
- Search: DHT sensor library
- Install: The one by Adafruit (author: Adafruit, license: MIT)
- Also install dependency: Adafruit Unified Sensor (the library manager will usually prompt you)

STEPPER MOTOR
1 StepperMOTOR 28BYJ-48
1 ULN2003 driver board

#include <Stepper.h>
const int stepsPerRevolution = 2048;
Stepper myStepper(stepsPerRevolution, 9, 10, 11, 12); // IN1, IN2, IN3, IN4
void setup() {
  myStepper.setSpeed(60);
}
void loop() {
  myStepper.step(stepsPerRevolution); // one full turn
  delay(500);                         // optional pause
}

--->ULN2003 driver board → Arduino

IN1 → D9

IN2 → D10

IN3 → D11

IN4 → D12

--->Power & motor

VCC on ULN2003 → 5V on Arduino (or to external 5V supply + if using external power)

GND on ULN2003 → GND on Arduino (and if using external supply, connect external GND to Arduino GND)

Motor connector → 28BYJ-48 stepper motor cable (fits the board)

--->Optional external adapter (if used)

Adapter + (positive) → VCC on ULN2003

Adapter – (negative) → GND on ULN2003 and Arduino GND (tie all grounds)

ULTRASONIC
1 HC-SR04 ULTRASONIC SENSOR
1 BUZZER

int trigPin = 9, echoPin = 8, buzzerPin = 7;

void setup() {
  Serial.begin(9600);
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);
  pinMode(buzzerPin, OUTPUT);
}

void loop() {
  digitalWrite(trigPin, LOW); delayMicroseconds(2);
  digitalWrite(trigPin, HIGH); delayMicroseconds(10);
  digitalWrite(trigPin, LOW);

  float distance = pulseIn(echoPin, HIGH) * 0.0343 / 2; // cm

  Serial.print("Distance: ");
  Serial.println(distance);

  digitalWrite(buzzerPin, (distance < 10) ? HIGH : LOW);

  delay(200);
}

Bullet-point wiring (simple)

-->Ultrasonic sensor (HC-SR04 style)

VCC → 5V on Arduino

GND → GND on Arduino

Trig → D9 (your trigPin)

Echo → D8 (your echoPin)

--->Buzzer

Buzzer + → D7 (your buzzerPin)

If passive: prefer using tone(7, frequency) instead of digitalWrite.

If current > ~20–30mA, use transistor driver: Arduino pin → base resistor → NPN transistor; buzzer + → external 5V; transistor emitter → GND; add diode if inductive.

Buzzer - → GND on Arduino

--->Common ground

Connect Arduino GND, sensor GND, and buzzer GND together.


SIM
#include <SoftwareSerial.h>

// RX = pin 2, TX = pin 3
SoftwareSerial sim900(2, 3);

void setup() {
  sim900.begin(9600);
  Serial.begin(9600);
  delay(1000);
  Serial.println("Initializing SIM900...");

  sendSMS();
}

void loop() {
  // Leave empty
}

void sendSMS() {
  sim900.println("AT");               // Attention command
  delay(1000);
  sim900.println("AT+CMGF=1");        // Set SMS text mode
  delay(1000);
  sim900.println("AT+CMGS=\"+91XXXXXXXXXX\"");  // Replace with number
  delay(1000);
  sim900.print("Hello from SIM900 via Arduino!");
  delay(1000);
  sim900.write(26); // CTRL+Z
  delay(2000);
}



Arduino Uno       SIM900 GSM Module
-----------              -----------------e
Pin 2 (RX)   <-------> TXD
Pin 3 (TX)   <-------> RXD
GND          -------- GND
external adapter---->powersupply to GSM Modul

MQTT
# combined.py
import paho.mqtt.client as mqtt
import time

broker = "broker.hivemq.com"
topic = "test/topic"

def on_connect(client, userdata, flags, rc):
    print("Connected", rc)
    client.subscribe(topic)

def on_message(client, userdata, msg):
    print("Received:", msg.payload.decode())

client = mqtt.Client(client_id="combined-client-001")  # make id unique
client.on_connect = on_connect
client.on_message = on_message

client.connect(broker, 1883, 60)
client.loop_start()  # run network loop in background

try:
    while True:
        client.publish(topic, "Hello from combined")
        print("Published")
        time.sleep(2)
except KeyboardInterrupt:
    pass
finally:
    client.loop_stop()
    client.disconnect()



