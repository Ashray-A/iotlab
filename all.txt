//2. traffic signal
int REDPIN = 13;  
int YELLOWPIN = 12;  
int GREENPIN = 11;  

void setup() {  
  pinMode(REDPIN, OUTPUT);  
  pinMode(YELLOWPIN, OUTPUT);  
  pinMode(GREENPIN, OUTPUT);  
}  

void loop() {  
  //Turn on the red led, and turn off the yellow and green leds.  
  digitalWrite(REDPIN, HIGH);  
  digitalWrite(YELLOWPIN, LOW);  
  digitalWrite(GREENPIN, LOW);  
  delay(2000);  

  //Turn on the yellow led, and turn off the red and green leds.  
  digitalWrite(REDPIN, LOW);  
  digitalWrite(YELLOWPIN, HIGH);  
  digitalWrite(GREENPIN, LOW);  
  delay(2000);  

  //Turn on the green led, and turn off the red and yellow leds.  
  digitalWrite(REDPIN, LOW);  
  digitalWrite(YELLOWPIN, LOW);  
  digitalWrite(GREENPIN, HIGH);  
  delay(2000);  
}

//diag

Arduino Uno (Digital Pins) → LED (with resistor ~220Ω) → GND

	Pin 13 ──[220Ω]──►|(+LED-)── GND  (Red LED)
	Pin 12 ──[220Ω]──►|(+LED-)── GND  (Yellow LED)
	Pin 11 ──[220Ω]──►|(+LED-)── GND  (Green LED)

---------------------------------------------------------------------------------------------------------------------------------+


//3. LDR LED
int ldrPin = A0;  // LDR connected to analog pin A0
int ledPin = 13;   // LED connected to pin 13
int ldrValue = 0;
int threshold = 500; // Adjust based on your light conditions

void setup() {
  pinMode(ledPin, OUTPUT);
}

void loop() {
  ldrValue = analogRead(ldrPin); // Read LDR value (0 - 1023)

  if (ldrValue < threshold) {    // If it's dark
    digitalWrite(ledPin, HIGH);  // Turn LED ON
  } else {                       // If it's bright
    digitalWrite(ledPin, LOW);   // Turn LED OFF
  }

  delay(100); // Small delay for stability
}
//diag
(+5V)-----(LDR)----|
			     |------[10kΩ resistor]-----GND
			     |
			   A0

//4. LED pushbutton toggle
const int buttonPin = 2;
const int ledPin = 13;

int ledState = LOW;

void setup() {
  pinMode(buttonPin, INPUT_PULLUP); // Button connected between pin and GND
  pinMode(ledPin, OUTPUT);
}

void loop() {
  if (digitalRead(buttonPin) == LOW) { // Button pressed
    ledState = !ledState;              // Toggle LED state
    digitalWrite(ledPin, ledState);
    delay(200); // Simple debounce
  }
}
//diag		   |-----------------|
         GND -------|      		|
                                     |		|
                                [Push Button]
                                     |		|
 Pin 2 (buttonPin) -------|


//5. Serial i/o
void setup() {
  Serial.begin(9600); // Start serial communication at 9600 baud
  Serial.println("Type something and press Enter:");
}

void loop() {
  if (Serial.available() > 0) {       // If data is received
    String data = Serial.readString(); // Read the incoming string
    Serial.print("You sent: ");       // Respond back
    Serial.println(data);
  }
}

---------------------------------------------------------------------------------------------------------------------------------+

//6. Turn on led based on dht temp sensor
#include <DHT.h>

// Define DHT Sensor Type and Pin
#define DHTPIN 2        // Pin where the DHT sensor is connected
#define DHTTYPE DHT11   // Change to DHT22 if using that model

DHT dht(DHTPIN, DHTTYPE);

// Define the output pin for LED
#define LED_PIN 13

// Set temperature threshold in Celsius
#define TEMP_THRESHOLD 30.0

void setup() {
  Serial.begin(9600);
  dht.begin();

  // Initialize LED output pin
  pinMode(LED_PIN, OUTPUT);
  digitalWrite(LED_PIN, LOW);  // Ensure it's OFF initially
}

void loop() {
  delay(2000);  // Wait between readings

  // Read temperature as Celsius
  float temperature = dht.readTemperature();
  float humidity = dht.readHumidity();

  // Check if any reads failed
  if (isnan(temperature) || isnan(humidity)) {
    Serial.println("Failed to read from DHT sensor!");
    return;
  }

  // Print the readings
  Serial.print("Temperature: ");
  Serial.print(temperature);
  Serial.print(" °C\tHumidity: ");
  Serial.print(humidity);
  Serial.println(" %");

  // Check if it's too hot
  if (temperature > TEMP_THRESHOLD) {
    digitalWrite(LED_PIN, HIGH);  // Turn ON LED
    Serial.println("Too hot! LED is ON.");
  } else {
    digitalWrite(LED_PIN, LOW);   // Turn OFF LED
    Serial.println("Temperature normal. LED is OFF.");
  }
}
//diag
DHT Sensor:
[5V]--------------------------------[5V]
[GND]--------------------------[GND]
[D2(arduino)]---[data_pin_of_sensor]

---------------------------------------------------------------------------------------------------------------------------------+


//7. Stepper motor
#include <Stepper.h>

const int stepsPerRevolution = 2048; // Depends on your motor (28BYJ-48 uses 2048)

Stepper myStepper(stepsPerRevolution, 9, 11, 10, 12); // Pins IN1, IN3, IN2, IN4

void setup() {
  myStepper.setSpeed(60); // Speed in RPM
}

void loop() {
  myStepper.step(stepsPerRevolution); // Rotate one full turn
}
//diag
[Stepper Controller]-------[Arduino]
IN1------------------------D9
IN2------------------------D10
IN3------------------------D11
IN4------------------------D12

(4 OTHER PINS IN CONTROLLER)---[2 FROM ADAPTOR POWERSUPPLY HOLD POSITIVE TO ADAPTOR PIN'S HOLE AND NEGATIVE TO ABV PIN METAL OF ADAPTOR]-----[OTHER TWO PINS SHORT WITH EACH OTHER]

---------------------------------------------------------------------------------------------------------------------------------+


//8. ultrasonic sensor

int trigPin = 9, echoPin = 8, buzzerPin = 7;

void setup() {
  Serial.begin(9600);
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);
  pinMode(buzzerPin, OUTPUT);
}

void loop() {
  digitalWrite(trigPin, LOW); delayMicroseconds(2);
  digitalWrite(trigPin, HIGH); delayMicroseconds(10);
  digitalWrite(trigPin, LOW);

  float distance = pulseIn(echoPin, HIGH) * 0.0343 / 2; // cm

  Serial.print("Distance: ");
  Serial.println(distance);

  digitalWrite(buzzerPin, (distance < 10) ? HIGH : LOW);

  delay(200);
}
//diag
[9]  --- Trig  ---      sensor  |
[8]  --- Echo  ---    sensor  |

 [7]      ---   +ve(Buzzer) 
 GND  --- GND(Buzzer) 
                             
5V      --- VCC(sensor) 
GND  --- GND(sensor)

---------------------------------------------------------------------------------------------------------------------------------+

//9. LCD temp display
#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <DHT.h>

#define DHTPIN 2
#define DHTTYPE DHT11

DHT dht(DHTPIN, DHTTYPE);

// Address 0x27 or 0x3F depending on your LCD module
LiquidCrystal_I2C lcd(0x27, 16, 2);   //16x2 is display size

void setup() {
  lcd.init();         // Use this instead of lcd.begin()
  lcd.backlight();    // Turn on LCD backlight
  dht.begin();
}

void loop() {
  float temp = dht.readTemperature();
  float hum = dht.readHumidity();

  lcd.clear();
  if (isnan(temp) || isnan(hum)) {
    lcd.setCursor(0, 0);
    lcd.print("DHT Error");
  } else {
    lcd.setCursor(0, 0);
    lcd.print("Temp: ");
    lcd.print(temp);
    lcd.print("C");

    lcd.setCursor(0, 1);
    lcd.print("Hum: ");
    lcd.print(hum);
    lcd.print("%");
  }

  delay(2000);
}

//diag
Arduino Uno    DHT11     I2C LCD
-----------           ------          -------
5V  ----------->  VCC   ------- VCC
GND --------->  GND   ------- GND
D2  ----------->  DATA
A4  ----------------------------> SDA
A5  ----------------------------> SCL

---------------------------------------------------------------------------------------------------------------------------------+

//10. SIM
#include <SoftwareSerial.h>

// RX = pin 2, TX = pin 3
SoftwareSerial sim900(2, 3);

void setup() {
  sim900.begin(9600);
  Serial.begin(9600);
  delay(1000);
  Serial.println("Initializing SIM900...");

  sendSMS();
}

void loop() {
  // Leave empty
}

void sendSMS() {
  sim900.println("AT");               // Attention command
  delay(1000);
  sim900.println("AT+CMGF=1");        // Set SMS text mode
  delay(1000);
  sim900.println("AT+CMGS=\"+91XXXXXXXXXX\"");  // Replace with number
  delay(1000);
  sim900.print("Hello from SIM900 via Arduino!");
  delay(1000);
  sim900.write(26); // CTRL+Z
  delay(2000);
}
//diag

Arduino Uno       SIM900 GSM Module
-----------              -----------------e
Pin 2 (RX)   <-------> TXD
Pin 3 (TX)   <-------> RXD
GND          -------- GND
external adapter---->powersupply to GSM Modul

---------------------------------------------------------------------------------------------------------------------------------+
//12. MQTT
pip install paho-mqtt
import paho.mqtt.client as mqtt
import time

broker = "broker.hivemq.com"   # Public broker
port = 1883
topic = "test/topic"

client = mqtt.Client()

print("Connecting to broker...")
client.connect(broker, port, 60)

while True:
    message = "Hello MQTT from Python!"
    client.publish(topic, message)
    print(f"Published: {message}")
    time.sleep(2)
